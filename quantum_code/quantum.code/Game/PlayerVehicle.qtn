struct Wheel
{
    EntityRef wheel;

    bool right;

    LayerMask layerMask;

    [ExcludeFromPrototype]
    Transform3D dummy;

    [ExcludeFromPrototype]
    FPVector3 dummyLocalPosition;

    [ExcludeFromPrototype]
    FP forwardSlip;

    [ExcludeFromPrototype]
    FP sidewaysSlip;

    [ExcludeFromPrototype]
    FPVector3 totalForce;

    [ExcludeFromPrototype]
    FPVector3 prevPosition;

    [ExcludeFromPrototype]
    bool isGrounded;

    [ExcludeFromPrototype]
    FP angularVelocity;

    [ExcludeFromPrototype]
    FP rotationAngle;

    [ExcludeFromPrototype]
    FP suspensionCompression;

    [ExcludeFromPrototype]
    FP suspensionCompressionPrev;

    [ExcludeFromPrototype]
    FP forceUp;

    [ExcludeFromPrototype]
    FPVector3 point;

    [ExcludeFromPrototype]
    FPVector3 normal;

    [ExcludeFromPrototype]
    FPVector3 forward;

    [ExcludeFromPrototype]
    FP torque;

    
    [ExcludeFromPrototype]
    FPVector3 totalForceCollision;

    [ExcludeFromPrototype]
    FP horizontalCompression;

    [ExcludeFromPrototype]
    FP horizontalCompressionPrev;
}

component PlayerVehicle
{
  EntityRef chassis;
  
  FP maxAngularVelocityWheels;

  FP reverseGearSpeedTreshold;

  bool tridimensionalWheels;

  array<Axle>[2] axles;
}

struct Axle
{
    FP width;
    FP horizontalPosition;
    FP verticalPosition;

    bool rear;

    FP steerAngle;

    FP wheelRadius;
    FP wheelMass;
    FP wheelFriction;
    FP wheelWidth;

    FP motorTorque;
    FP brakeTorque;

    FP suspensionDistance;
    FP suspensionSpring;
    FP suspensionDamper;

    array<Wheel>[2] wheels;
}

﻿input
{
    bool throttle;
    bool brake;
    FP steer;
    bool reset;
}